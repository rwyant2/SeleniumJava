<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="linux-ThinkPad-E460" ignored="4" name="dynamic test 1" tests="8" failures="1" timestamp="13 Jul 2018 10:17:02 GMT" time="27.245" errors="0">
  <testcase name="@BeforeClass beforeClass" time="26.048" classname="cases.PapaBless">
    <failure type="org.openqa.selenium.InvalidArgumentException" message="Malformed URL: 127.0.1.1:8080 is not a valid URL.
Build info: version: &amp;apos;3.11.0&amp;apos;, revision: &amp;apos;e59cfb3&amp;apos;, time: &amp;apos;2018-03-11T20:33:08.638Z&amp;apos;
System info: host: &amp;apos;linux-ThinkPad-E460&amp;apos;, ip: &amp;apos;127.0.1.1&amp;apos;, os.name: &amp;apos;Linux&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;4.13.0-45-generic&amp;apos;, java.version: &amp;apos;1.8.0_171&amp;apos;
Driver info: org.openqa.selenium.remote.RemoteWebDriver
Capabilities {acceptInsecureCerts: false, browserName: firefox, browserVersion: 61.0.1, javascriptEnabled: true, moz:accessibilityChecks: false, moz:headless: false, moz:processID: 4044, moz:profile: C:\Users\Richard\AppData\Lo..., moz:useNonSpecCompliantPointerOrigin: false, moz:webdriverClick: true, pageLoadStrategy: normal, platform: XP, platformName: XP, platformVersion: 6.1, rotatable: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, webdriver.remote.sessionid: 3e12e1db-5776-4b80-82a5-c44...}
Session ID: 3e12e1db-5776-4b80-82a5-c440a44c4eb2">
      <![CDATA[org.openqa.selenium.InvalidArgumentException: Malformed URL: 127.0.1.1:8080 is not a valid URL.
Build info: version: '3.11.0', revision: 'e59cfb3', time: '2018-03-11T20:33:08.638Z'
System info: host: 'linux-ThinkPad-E460', ip: '127.0.1.1', os.name: 'Linux', os.arch: 'amd64', os.version: '4.13.0-45-generic', java.version: '1.8.0_171'
Driver info: org.openqa.selenium.remote.RemoteWebDriver
Capabilities {acceptInsecureCerts: false, browserName: firefox, browserVersion: 61.0.1, javascriptEnabled: true, moz:accessibilityChecks: false, moz:headless: false, moz:processID: 4044, moz:profile: C:\Users\Richard\AppData\Lo..., moz:useNonSpecCompliantPointerOrigin: false, moz:webdriverClick: true, pageLoadStrategy: normal, platform: XP, platformName: XP, platformVersion: 6.1, rotatable: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, webdriver.remote.sessionid: 3e12e1db-5776-4b80-82a5-c44...}
Session ID: 3e12e1db-5776-4b80-82a5-c440a44c4eb2
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:545)
at org.openqa.selenium.remote.RemoteWebDriver.get(RemoteWebDriver.java:273)
at cases.PapaBless.beforeClass(PapaBless.java:264)
at GrandpaBless.main(GrandpaBless.java:78)
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@AfterClass afterClass" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @AfterClass afterClass -->
  <testcase name="@BeforeClass beforeClass" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterTest afterTest" time="0.0" classname="cases.PapaBless">
    <skipped/>
  </testcase> <!-- @AfterTest afterTest -->
  <testcase name="checkBoxAll" time="0.0" classname="cases.CheckBoxCase">
    <skipped/>
  </testcase> <!-- checkBoxAll -->
  <testcase name="checkBoxNone" time="0.0" classname="cases.CheckBoxCase">
    <skipped/>
  </testcase> <!-- checkBoxNone -->
  <testcase name="checkBoxOneThree" time="0.0" classname="cases.CheckBoxCase">
    <skipped/>
  </testcase> <!-- checkBoxOneThree -->
  <testcase name="checkBoxOneTwo" time="0.0" classname="cases.CheckBoxCase">
    <skipped/>
  </testcase> <!-- checkBoxOneTwo -->
  <testcase name="checkBoxTwoThree" time="0.0" classname="cases.CheckBoxCase">
    <skipped/>
  </testcase> <!-- checkBoxTwoThree -->
  <testcase name="intentionalFailcheckBox" time="0.0" classname="cases.CheckBoxCase">
    <skipped/>
  </testcase> <!-- intentionalFailcheckBox -->
  <testcase name="intentionalFailTextField" time="0.0" classname="cases.TextFieldCase">
    <skipped/>
  </testcase> <!-- intentionalFailTextField -->
  <testcase name="intentionalFailTextField" time="0.001" classname="cases.TextFieldCase">
    <failure type="java.lang.ClassCastException" message="cases.TextFieldCase cannot be cast to cases.CheckBoxCase">
      <![CDATA[java.lang.ClassCastException: cases.TextFieldCase cannot be cast to cases.CheckBoxCase
at cases.TestListener.onTestSkipped(TestListener.java:48)
at GrandpaBless.main(GrandpaBless.java:78)
... Removed 20 stack frames]]>
    </failure>
  </testcase> <!-- intentionalFailTextField -->
  <testcase name="@BeforeSuite beforeSuite" time="0.0" classname="cases.PapaBless">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforeSuite -->
  <testcase name="@BeforeTest beforeTest" time="0.0" classname="cases.PapaBless">
    <ignored/>
  </testcase> <!-- @BeforeTest beforeTest -->
  <testcase name="@AfterSuite afterSuite" time="0.0" classname="cases.PapaBless">
    <ignored/>
  </testcase> <!-- @AfterSuite afterSuite -->
  <testcase name="@AfterTest afterTest" time="0.0" classname="cases.PapaBless">
    <ignored/>
  </testcase> <!-- @AfterTest afterTest -->
</testsuite> <!-- dynamic test 1 -->
